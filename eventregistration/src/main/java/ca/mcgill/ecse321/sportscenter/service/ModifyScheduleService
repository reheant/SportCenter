package ca.mcgill.ecse321.sportscenter.service;

import ca.mcgill.ecse321.sportscenter.dao.*;
import ca.mcgill.ecse321.sportscenter.model.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.sql.Time;
//import java.util.Optional;

@Service
public class ModifyScheduleService {

    @Autowired
    private SessionRepository sessionRepository;
    @Autowired
    private CourseRepository courseRepository;
    @Autowired
    private LocationRepository locationRepository;
    @Autowired
    private InstructorRepository instructorRepository;
    @Autowired
    private InstructorAssignmentRepository instructorAssignmentRepository;

    @Transactional
    public Session modifySessionTime(Integer sessionId, Time newStartTime, Time newEndTime) {
        Session session = sessionRepository.findById(sessionId)
        .orElseThrow(() -> new IllegalArgumentException("No session found with id " + sessionId));

        session.setStartTime(newStartTime);
        session.setEndTime(newEndTime);
        return sessionRepository.save(session);
    }

    @Transactional
    public Session modifySessionCourse(Integer sessionId, Integer courseId) {
        Session session = sessionRepository.findById(sessionId)
        .orElseThrow(() -> new IllegalArgumentException("No session found with id " + sessionId));
        
        Course course = courseRepository.findById(courseId)
        .orElseThrow(() -> new IllegalArgumentException("No course found with id " + courseId));
        
        session.setCourse(course);
        return sessionRepository.save(session);
    }

    @Transactional
    public Session modifySessionLocation(Integer sessionId, Integer locationId) {
        Session session = sessionRepository.findById(sessionId)
        .orElseThrow(() -> new IllegalArgumentException("No session found with id " + sessionId));
        
        Location location = locationRepository.findById(locationId)
        .orElseThrow(() -> new IllegalArgumentException("No location found with id " + locationId));
        
        session.setLocation(location);
        return sessionRepository.save(session);
    }

    @Transactional
    public InstructorAssignment assignInstructorToSession(Integer sessionId, Integer instructorId) {
        Session session = sessionRepository.findById(sessionId)
        .orElseThrow(() -> new IllegalArgumentException("No session found with id " + sessionId));
        
        Instructor instructor = instructorRepository.findById(instructorId)
        .orElseThrow(() -> new IllegalArgumentException("No instructor found with id " + instructorId));

        InstructorAssignment instructorAssignment = new InstructorAssignment();
        instructorAssignment.setInstructor(instructor);
        instructorAssignment.setSession(session);

        return instructorAssignmentRepository.save(instructorAssignment);
    }

}




